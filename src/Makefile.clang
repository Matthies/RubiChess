#
# Start MSVC Command prompt for x64 native tools and
# nmake /f Makefile.clang <target> [COMP=icx|clang] [SDE="c:\..\sde.exe"] [ARCH=...]
# <target> can be
# release		to build all binaries for release package in subfolder Release-clang using the Intel emulator where necessary
# build			to build fast binary
# profile-build to build even faster binary
# release-arm64	to cross-compile for ARCH arm64-neon (needs shell with cross-plattform settings)
# ARCH can be one of x86-64-avx512, x86-64-bmi2, x86-64-avx2, x86-64-modern, x86-64-ssse3, x86-64-sse3-popcnt, x86-64
# If ARCH is omitted the CPU features are auto-detected
#
# General settings
# For best Windows x64 builds install
# a. Intel ICX compiler from https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#dpcpp-cpp in default folder C:\Program Files (x86)\Intel\oneAPI or
# b. LLVM version 9 from https://releases.llvm.org/9.0.0/LLVM-9.0.0-win64.exe in folder C:\Program Files\LLVM9
# For profiling a not supported platform (like avx512 in my case) set SDE to the Intel Software Development Emulator https://software.intel.com/content/www/us/en/develop/articles/intel-software-development-emulator.html
# and define EMU when calling pgo-rename

!IF !DEFINED(COMP) || "$(COMP)" == "clang"
!IF !DEFINED(CLANGVER)
CLANGVER=9
!ENDIF
CompilerBaseDir=C:\Program Files\LLVM$(CLANGVER)
CXX="$(CompilerBaseDir)\bin\clang-cl.exe"
LD="$(CompilerBaseDir)\bin\lld-link.exe"
PROFDATATOOLEXE="$(CompilerBaseDir)\bin\llvm-profdata.exe"
!ELSEIF "$(COMP)" == "icx"
CompilerBaseDir=C:\Program Files (x86)\Intel\oneAPI\compiler\latest
!IF EXIST("$(CompilerBaseDir)\windows")				# Path up to Intel oneAPI 2023.1
CompilerBaseDir=$(CompilerBaseDir)\windows
!ENDIF
CXX="$(CompilerBaseDir)\bin\icx-cl.exe"
!IF EXISTS("$(CompilerBaseDir)\bin-llvm")			# Path up to Intel oneAPI 2023.1
CompilerClangDir=$(CompilerBaseDir)\bin-llvm
!ELSEIF EXISTS("$(CompilerBaseDir)\bin\compiler")	# Path of Intel oneAPI 2024.0
CompilerClangDir=$(CompilerBaseDir)\bin\compiler
!ELSE
!ERROR Folder with Linker tools not found.
!ENDIF
LD="$(CompilerClangDir)\lld-link.exe"
PROFDATATOOLEXE="$(CompilerClangDir)\llvm-profdata.exe"
!ELSE
!ERROR Not supported compiler $(COMP)
!ENDIF

SOURCE=*.cpp
OBJ=*.obj
RELDIR=Release-clang
ZLIBDIR=zlib
CXXFLAGS=/EHsc /O2 /Oi /Ot /c -flto -fuse-ld=lld
!IF "$(COMP)" == "clang"
CPPFLAGS=/std:c++20
!ELSE
CPPFLAGS=-Qstd=c++20
!ENDIF
LDFLAGS=/OPT:REF /OPT:ICF advapi32.lib
PROFEXE=RubiChess-WinProf
NETURL=https://github.com/Matthies/NN/raw/main/
TMPNN=_tmp.nnue
CPUTEST=cputest
EXE=RubiChess
GIT=git
NATIVEFLAGS=_nativeflags.txt
SDEDEFAULT="C:\bin\SDE\sde.exe"
!IF !DEFINED(SDE)
SDE=$(SDEDEFAULT)
!ENDIF


# Release-Dir
!IF !EXIST($(RELDIR))
!MESSAGE $(RELDIR):
!IF [mkdir $(RELDIR)] != 0
!ERROR Cannot create folder  $(RELDIR)!
!ELSE
!MESSAGE Successfully created folder $(RELDIR)!
!ENDIF
!ENDIF

# compilercheck
!IF !DEFINED(CCHECK)
!MESSAGE Compiler and Tools:
!Message Compiler base directory: $(CompilerBaseDir)
!IF [$(CXX) --version > nul 2>&1] != 0
!ERROR Compiler $(CXX) not found or not working. Exit!
!ELSE
!MESSAGE Found Compiler $(CXX).
!ENDIF
!IF [$(LD) --version > nul 2>&1] != 0
!ERROR Linker $(LD) not found or not working. Exit!
!ELSE
!MESSAGE Found Linker $(LD).
!ENDIF
!IF [$(PROFDATATOOLEXE) --help > nul 2>&1] != 0
!ERROR Profiling tool $(PROFDATATOOLEXE) not found or not working. Exit!
!ELSE
!MESSAGE Found Profiling tool $(PROFDATATOOLEXE).
!ENDIF
!IF EXIST($(SDE))
!MESSAGE Found Software Development Emulator (SDE) at $(SDE).
!ELSE
!MESSAGE Software Development Emulator (SDE) not found.
!ENDIF
!MESSAGE ==========================================================================

# network
!MESSAGE Network:
!IF [@FOR /F "tokens=3" %A IN ('find "NNUEDEFAULT " RubiChess.h') DO @(if exist %A ( @echo Net %A already exists ) else ( curl -skL $(NETURL)%A > $(TMPNN) && move $(TMPNN) %A && echo Net %A was downloaded. )) && @if not exist $(RELDIR)\%A ( @copy  %A $(RELDIR)\%A )  ] != 0
!ERROR Cannot get default net from header file or download failed!
!ENDIF
!MESSAGE ==========================================================================
CCHECK=done
!ENDIF

!IFNDEF ARCH
ARCH=native
!ENDIF

# nativeflags
!IF "$(ARCH)"=="native" && !EXIST($(NATIVEFLAGS)) && "$(VSCMD_ARG_HOST_ARCH)"=="$(VSCMD_ARG_TGT_ARCH)"
!IF [$(CXX) $(CPPFLAGS) /GX -DCPUTEST $(CPUTEST).cpp -o $(CPUTEST) && @$(CPUTEST) > $(NATIVEFLAGS)] != 0
!ERROR Cannot compile and/or run $(CPUTEST) to determine cpu flags on this machine!
!ENDIF
!ENDIF
!IF "$(ARCH)"!="native"
!IF EXIST($(NATIVEFLAGS)) && [@del $(NATIVEFLAGS) 2>nul] != 0
!ERROR Cannot delete cpu flags file $(NATIVEFLAGS)
!ENDIF
!ENDIF

cpuflags: lib-clean
!IF "$(ARCH)" == "x86-64-avx512"
CPUFLAGS=avx512 bmi2 avx2 bmi1 lzcnt popcnt ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-bmi2"
CPUFLAGS=bmi2 avx2 bmi1 lzcnt popcnt ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-avx2"
CPUFLAGS=avx2 bmi1 lzcnt popcnt ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-modern"
CPUFLAGS=popcnt ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-ssse3"
CPUFLAGS=ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-sse3-popcnt"
CPUFLAGS=popcnt sse2
!ELSEIF "$(ARCH)" == "x86-64-sse2"
CPUFLAGS=sse2
!ELSEIF "$(ARCH)" == "arm64-neon"
CPUFLAGS=neon
!ENDIF

!IF [@echo $(CPUFLAGS) | find "avx512" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "avx512" > nul] == 0
AVX512=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_AVX512 -mavx512f -mavx512bw
!ELSE
AVX512=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "bmi2" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "bmi2" > nul] == 0
BMI2=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_BMI2 -mbmi2
!ELSE
BMI2=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "avx2" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "avx2" > nul] == 0
AVX2=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_AVX2 -mavx2
!ELSE
AVX2=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "bmi" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "bmi" > nul] == 0
BMI1=yes
ARCHFLAGS=$(ARCHFLAGS)  -DUSE_BMI1 -mbmi -mlzcnt
!ELSE
BMI1=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "popcnt" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "popcnt" > nul] == 0
POPCNT=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_POPCNT -mpopcnt -msse3
!ELSE
POPCNT=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "ssse3" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "ssse3" > nul] == 0
SSSE3=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_SSSE3 -mssse3
!ELSE
SSSE3=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "sse2" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "sse2" > nul] == 0
SSE2=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_SSE2 -msse2
!ELSE
SSE2=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "neon" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "neon" > nul] == 0
NEON=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_NEON -DUSE_ARM64 --target=arm64-pc-windows-msvc
!ELSE
NEON=no
!ENDIF

ARCHFLAGS=$(ARCHFLAGS) -DUSE_ZLIB
CXXFLAGS=$(CXXFLAGS) /I$(ZLIBDIR)
LDFLAGS=$(LDFLAGS) /libpath:$(ZLIBDIR) zlib.lib

printarch: cpuflags
	@echo.
	@echo Arch: $(ARCH)
	@echo CPU features:
	@echo =============
	@echo avx512: $(AVX512)
	@echo bmi2__: $(BMI2)
	@echo avx2__: $(AVX2)
	@echo bmi1__: $(BMI1)
	@echo popcnt: $(POPCNT)
	@echo ssse3_: $(SSSE3)
	@echo sse2__: $(SSE2)
	@echo neon__: $(NEON)

buildandarch: printarch compile

$(ZLIBDIR)\zlib.lib:
	@cd $(ZLIBDIR)
	@$(CXX) $(CXXFLAGS) $(ARCHFLAGS) -w /c *.c
	@$(LD) /lib /OUT:zlib.lib $(OBJ)
	@cd ..

build: cpuflags
	@set CCHECK=$(CCHECK)
	@set ARCH=$(ARCH)
	@echo Building binary for $(ARCH)...
	@nmake -c -f Makefile.clang buildandarch
	@nmake -c -f Makefile.clang profile-clean

compile: $(ZLIBDIR)\zlib.lib
!IFNDEF GITVER
	@FOR /F "tokens=2" %A IN ('cmd /c "($(GIT) show --name-only --abbrev-commit --date=format:%Y%m%d || echo Date: %date%) | findstr /I /r /c:"^Date: "" ') DO @(set GITVER=%A&&  nmake -f Makefile.clang $* /$(MAKEFLAGS) && exit /B)
!ELSE
!IFNDEF GITID
	@FOR /F "tokens=2" %A IN ('cmd /c "($(GIT) show --name-only --abbrev-commit || echo commit unknown) | findstr /r /c:"^commit"" ') DO @(set GITID=%A&& nmake -f Makefile.clang $* /$(MAKEFLAGS) && exit /B)
!ELSE
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(ARCHFLAGS) $(SOURCE) $(PROFILEFLAGS) -D GITVER=\"$(GITVER)\" -D GITID=\"$(GITID)\"
!IFDEF USEPROFLIB
	@$(LD) $(LDFLAGS) /OUT:$(PROFEXE).exe $(OBJ) "$(USEPROFLIB)"
!ELSE
	@$(LD) $(LDFLAGS) /OUT:$(RELDIR)\$(EXE).exe $(OBJ)
!ENDIF
!ENDIF
!ENDIF

pgo:
!IFNDEF PROFLIB
	@(FOR /F "tokens=*" %A IN ('dir /b /s "$(CompilerBaseDir)\*clang_rt.profile-x86_64.lib*"') DO @(set PROFLIB="%A" &&  nmake -f Makefile.clang $* /$(MAKEFLAGS) && exit /B)) || @(echo 'Profiling library not found. Exit!' && exit 0)
!ELSE
	@echo Compiling instrumented binary...
	@nmake -c -f Makefile.clang compile PROFILEFLAGS=-fprofile-instr-generate=$(PROFEXE).clangprof-raw USEPROFLIB=$(PROFLIB)
	@echo Bench to generate profiling data...
	@($(PROFEXE) -bench >nul || (if exist $(SDE) ( @echo Using Intels Software Development Emulator... && $(SDE) -icx -- $(PROFEXE) -bench >nul) else (@echo Intels Software Development Emulator needed but not found at $(SDE). Performance will be poor.)))
	@$(PROFDATATOOLEXE) merge -output=$(PROFEXE).clangprof $(PROFEXE).clangprof-raw
	@echo.
	@echo Compiling optimized binary...
	@nmake -c -f Makefile.clang compile PROFILEFLAGS=-fprofile-instr-use=$(PROFEXE).clangprof
!ENDIF

profile-build: cpuflags printarch
	@set CCHECK=$(CCHECK)
	@set ARCH=$(ARCH)
	@nmake -c -f Makefile.clang pgo
	@nmake -c -f Makefile.clang profile-clean

pgo-rename: printarch pgo
	@move $(RELDIR)\$(EXE).exe $(RELDIR)\$(EXE)-$(VERSION)_$(ARCH).exe 1>nul
	@echo Successfully built $(EXE)-$(VERSION)_$(ARCH)

build-rename: build
	@move $(RELDIR)\$(EXE).exe $(RELDIR)\$(EXE)-$(VERSION)_$(ARCH).exe 1>nul
	@echo Successfully built $(EXE)-$(VERSION)_$(ARCH)

releaseversion:
	@echo Version: $(VERSION)
!IF "$(VSCMD_ARG_TGT_ARCH)" == "x64"
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-avx512
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-bmi2
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-avx2
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-modern
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-ssse3
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-sse3-popcnt
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-sse2
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64
!ENDIF
!IF "$(VSCMD_ARG_TGT_ARCH)" == "arm64"
	@nmake -c -f Makefile.clang build-rename ARCH=arm64-neon
!ENDIF

release:
	@set CCHECK=$(CCHECK)
	@set ARCH=special
	@nmake -c -f Makefile.clang profile-clean
!IFNDEF VERSIONLEGACY
	@FOR /F "tokens=3" %A IN ('find "define VERNUMLEGACY " RubiChess.h') DO @(set VERSIONLEGACY=%A&& nmake -f Makefile.clang $* /$(MAKEFLAGS) && exit /B)
!ELSE
!IFNDEF VERSION
	@FOR /F "tokens=2" %A IN ('cmd /c "($(GIT) show --name-only --abbrev-commit --date=format:%Y%m%d || echo Date: %VERSIONLEGACY%) | findstr /I /r /c:"^Date: "" ') DO @(set VERSION=%A&&  nmake -f Makefile.clang $* /$(MAKEFLAGS) && exit /B)
!ELSE
	@nmake -c -f Makefile.clang releaseversion
!ENDIF
!ENDIF
	@nmake -c -f Makefile.clang profile-clean

release-arm64:
	@nmake -c -f Makefile.clang build-rename ARCH=arm64-neon

lib-clean:
	@del $(ZLIBDIR)\*.obj 2>nul
	@del $(ZLIBDIR)\zlib.lib 2>nul

profile-clean: lib-clean
	@del $(PROFEXE)* 2>nul
	@del *.obj 2>nul
	@del $(NATIVEFLAGS) 2>nul

clean: profile-clean lib-clean
	@del $(RELDIR)\$(EXE).exe 2>nul
	@del $(CPUTEST).exe 2>nul
	@set RUBINET=

