#
# Start MSVC Command prompt for x64 native tools and
# nmake /f Makefile.clang release [SDE="c:\..\sde.exe"]	to build all binaries for release package in subfolder Release-clang using the Intel emulator where necessary
# nmake /f Makefile.clang build [ARCH=...]				to build fast binary
# nmake /f Makefile.clang profile-build [ARCH=...]		to build even faster binary
# ARCH can be one of x86-64-avx512, x86-64-bmi2, x86-64-avx2, x86-64-modern, x86-64-ssse3, x86-64-sse3-popcnt, x86-64
# If ARCH is omitted the CPU features are auto-detected
# nmake /f Makefile.clang release-arm64					to cross-compile for ARCH arm64-neon (needs shell with cross-plattform settings)

# General settings
# For best Windows x64 builds install LLVM version 9 from https://releases.llvm.org/9.0.0/LLVM-9.0.0-win64.exe
# in folder C:\Program Files\LLVM9
# For profiling a not supported platform (like avx512 in my case) set SDE to the Intel Software Development Emulator https://software.intel.com/content/www/us/en/develop/articles/intel-software-development-emulator.html
# and define EMU when calling pgo-rename
!IF !DEFINED(CLANGVER)
CLANGVER=9
!ENDIF
LLVMInstallDir=C:\Program Files\LLVM$(CLANGVER)
CXX="$(LLVMInstallDir)\bin\clang-cl.exe"
LD="$(LLVMInstallDir)\bin\lld-link.exe"
PROFDATATOOLEXE="$(LLVMInstallDir)\bin\llvm-profdata.exe"
SOURCE=*.cpp
OBJ=*.obj
RELDIR=Release-clang
CXXFLAGS=/EHsc /O2 /Oi /Ot /c -flto -fuse-ld=lld
LDFLAGS=/OPT:REF /OPT:ICF advapi32.lib
PROFEXE=RubiChess-WinProf
NETURL=https://github.com/Matthies/NN/raw/main/
TMPNN=_tmp.nnue
VERSIONCMD=_version.cmd
CPUTEST=cputest
EXE=RubiChess
NATIVEFLAGS=_nativeflags.txt
SDEDEFAULT="C:\_portable\sde-external-8.63.0-2021-01-18-win\sde.exe"
!IF !DEFINED(SDE)
SDE=$(SDEDEFAULT)
!ENDIF
GETDEFINE=
!IF "$(GITVER)"!=""
GITDEFINE = -D GITVER=\"$(GITVER)\"
!ENDIF
!IF "$(GITID)"!=""
GITDEFINE = $(GITDEFINE) -D GITID=\"$(GITID)\"
!ENDIF

$(RELDIR):
	mkdir $(RELDIR)

compilercheck:
!IF !DEFINED(ARCH)
!MESSAGE Compiler and Tools:
!IF !EXIST($(CXX))
!ERROR Compiler $(CXX) not found. Exit!
!ELSE
!MESSAGE Found Compiler $(CXX).
!ENDIF
!IF !EXIST($(LD))
!ERROR Linker $(LD) not found. Exit!
!ELSE
!MESSAGE Found Linker $(LD).
!ENDIF
!IF !EXIST($(PROFDATATOOLEXE))
!ERROR Profiling tool $(PROFDATATOOLEXE) not found. Exit!
!ELSE
!MESSAGE Found Profiling tool $(PROFDATATOOLEXE).
!ENDIF
!MESSAGE ==========================================================================
!ENDIF

network:
!IF !DEFINED(ARCH)
!MESSAGE Network:
!IF [@FOR /F "tokens=3" %A IN ('find "NNUEDEFAULT " RubiChess.h') DO @(if exist %A ( @echo Net %A already exists ) else ( curl -skL $(NETURL)%A > $(TMPNN) && move $(TMPNN) %A && echo Net %A was downloaded. )) && @if not exist $(RELDIR)\%A ( @copy  %A $(RELDIR)\%A )  ] != 0
	@echo Cannot get default net from header file or download failed!
!ENDIF
!MESSAGE ==========================================================================
!ENDIF

ARCH=native

nativeflags:
!IF "$(ARCH)"=="native"
	@$(CXX) /GX -DCPUTEST $(CPUTEST).cpp -o $(CPUTEST)
	-@$(CPUTEST) > $(NATIVEFLAGS)
!ELSE
	-@del $(NATIVEFLAGS) 2>nul
!ENDIF

cpuflags: nativeflags
!IF "$(ARCH)" == "x86-64-avx512"
CPUFLAGS=avx512 bmi2 avx2 bmi1 lzcnt popcnt ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-bmi2"
CPUFLAGS=bmi2 avx2 bmi1 lzcnt popcnt ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-avx2"
CPUFLAGS=avx2 bmi1 lzcnt popcnt ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-modern"
CPUFLAGS=popcnt ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-ssse3"
CPUFLAGS=ssse3 sse2
!ELSEIF "$(ARCH)" == "x86-64-sse3-popcnt"
CPUFLAGS=popcnt sse2
!ELSEIF "$(ARCH)" == "x86-64"
CPUFLAGS=sse2
!ELSEIF "$(ARCH)" == "arm64-neon"
CPUFLAGS=neon
!ENDIF

!IF [@echo $(CPUFLAGS) | find "avx512" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "avx512" > nul] == 0
AVX512=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_AVX512 -mavx512f -mavx512bw
!ELSE
AVX512=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "bmi2" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "bmi2" > nul] == 0
BMI2=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_BMI2 -mbmi2
!ELSE
BMI2=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "avx2" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "avx2" > nul] == 0
AVX2=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_AVX2 -mavx2
!ELSE
AVX2=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "bmi" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "bmi" > nul] == 0
BMI1=yes
ARCHFLAGS=$(ARCHFLAGS)  -DUSE_BMI1 -mbmi -mlzcnt
!ELSE
BMI1=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "popcnt" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "popcnt" > nul] == 0
POPCNT=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_POPCNT -mpopcnt -msse3
!ELSE
POPCNT=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "ssse3" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "ssse3" > nul] == 0
SSSE3=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_SSSE3 -mssse3
!ELSE
SSSE3=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "sse2" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "sse2" > nul] == 0
SSE2=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_SSE2 -msse2
!ELSE
SSE2=no
!ENDIF
!IF [@echo $(CPUFLAGS) | find "neon" > nul] == 0 || [type $(NATIVEFLAGS) 2>nul | find "neon" > nul] == 0
NEON=yes
ARCHFLAGS=$(ARCHFLAGS) -DUSE_NEON --target=arm64-pc-windows-msvc
!ELSE
NEON=no
!ENDIF

printarch: cpuflags
	@echo.
	@echo Arch: $(ARCH)
	@echo CPU features:
	@echo =============
	@echo avx512: $(AVX512)
	@echo bmi2__: $(BMI2)
	@echo avx2__: $(AVX2)
	@echo bmi1__: $(BMI1)
	@echo popcnt: $(POPCNT)
	@echo ssse3_: $(SSSE3)
	@echo sse2__: $(SSE2)
	@echo neon__: $(NEON)

buildandarch: printarch compile

build: cpuflags
	@echo Building binary for $(ARCH)
	@nmake -c -f Makefile.clang buildandarch ARCH=$(ARCH)
	@nmake -c -f Makefile.clang profile-clean ARCH=$(ARCH)

compile: $(RELDIR)
	@$(CXX) $(CXXFLAGS) $(ARCHFLAGS) $(SOURCE) $(PROFILEFLAGS) $(GITDEFINE)
!IFDEF PROFLIB
	@$(LD) $(LDFLAGS) /OUT:$(PROFEXE).exe $(OBJ) "$(PROFLIB)"
!ELSE
	@$(LD) $(LDFLAGS) /OUT:$(RELDIR)\$(EXE).exe $(OBJ) "$(PROFLIB)"
!ENDIF

pgo: printarch
	@echo Creating instrumented binary...
	@nmake -c -f Makefile.clang compile ARCH=$(ARCH) PROFILEFLAGS=-fprofile-instr-generate=$(PROFEXE).clangprof-raw PROFLIB="$(LLVMInstallDir)\lib\clang\$(CLANGVER).0.0\lib\windows\clang_rt.profile-x86_64.lib"
	@echo Bench to generate profiling data...
	@($(PROFEXE) -bench >nul || (if exist $(SDE) ( @echo Using Intels Software Development Emulator... && $(SDE) -- $(PROFEXE) -bench >nul) else (@echo Intels Software Development Emulator needed but not found at $(SDE). Performance will be poor.)))
	@$(PROFDATATOOLEXE) merge -output=$(PROFEXE).clangprof $(PROFEXE).clangprof-raw
	@echo.
	@echo Creating optimized binary...
	@nmake -c -f Makefile.clang compile ARCH=$(ARCH) PROFILEFLAGS=-fprofile-instr-use=$(PROFEXE).clangprof

profile-build: cpuflags
	@nmake -c -f Makefile.clang pgo ARCH=$(ARCH)
	@nmake -c -f Makefile.clang profile-clean ARCH=$(ARCH)

pgo-rename: printarch pgo
	@move $(RELDIR)\$(EXE).exe $(RELDIR)\$(EXE)-$(VERSION)_$(ARCH).exe 1>nul
	@echo Successfully created $(EXE)-$(VERSION)_$(ARCH)

build-rename: build
	@move $(RELDIR)\$(EXE).exe $(RELDIR)\$(EXE)-$(VERSION)_$(ARCH).exe 1>nul
	@echo Successfully created $(EXE)-$(VERSION)_$(ARCH)

releaseversion:
	@echo Version: $(VERSION)
!IF "$(VSCMD_ARG_TGT_ARCH)" == "x64"
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-avx512
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-bmi2
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-avx2
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-modern
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-ssse3
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64-sse3-popcnt
	@nmake -c -f Makefile.clang pgo-rename ARCH=x86-64
	@nmake -c -f Makefile.clang profile-clean ARCH=$(ARCH)
!ENDIF
!IF "$(VSCMD_ARG_TGT_ARCH)" == "arm64"
	@nmake -c -f Makefile.clang build-rename ARCH=arm64-neon
!ENDIF

release:
	@echo ::Batch to get version number> $(VERSIONCMD)
	@echo @echo off>> $(VERSIONCMD)
	@echo set GITVER=>> $(VERSIONCMD)
	@echo FOR /F "tokens=3" %%%%A IN ('find "define VERNUMLEGACY " RubiChess.h') DO ( set VERSION=%%%%A)>> $(VERSIONCMD)
	@echo FOR /F "tokens=2" %%%%A IN ('cmd /c "git show --name-only --abbrev-commit --date=format:%%%%Y%%%%m%%%%d | findstr /I /r /c:"^Date: "" ') DO ( set GITVER=%%%%A) >> $(VERSIONCMD)
	@echo FOR /F "tokens=2" %%%%A IN ('cmd /c "git show --name-only --abbrev-commit | findstr /r /c:"^commit"" ') DO ( set GITID=%%%%A) >> $(VERSIONCMD)
	@echo if not [%%GITVER%%]==[] (>> $(VERSIONCMD)
	@echo   set VERSION=%%GITVER%%>> $(VERSIONCMD)
	@echo )>> $(VERSIONCMD)
	@echo nmake -f Makefile.clang releaseversion ARCH=$(ARCH) >> $(VERSIONCMD)
	@$(VERSIONCMD)
	@del $(VERSIONCMD)

release-arm64:
	@nmake -c -f Makefile.clang build-rename ARCH=arm64-neon

profile-clean:
	@del $(PROFEXE)* 2>nul
	@del *.obj 2>nul
	@del $(NATIVEFLAGS) 2>nul

clean: profile-clean
	@del $(RELDIR)\$(EXE).exe 2>nul
	@del $(CPUTEST).exe 2>nul
	@del $(VERSIONCMD) 2>nul
	@set RUBINET=

